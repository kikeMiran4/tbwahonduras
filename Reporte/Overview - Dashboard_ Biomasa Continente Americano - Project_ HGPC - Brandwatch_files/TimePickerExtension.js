(function(){define("src/controls/views/SelectTagsView",["underscore","src/controls/views/SelectDropdownView"],function(_,SelectDropdownView){"use strict";return SelectDropdownView.extend({constructor:function SelectTagsView(options){options=_.extend({},options,{propertyName:"tag",displaySummary:true,summaryActionLabel:"tagged"});SelectDropdownView.call(this,options)}})});define("mustache!src/components/chart/templates/selectMultipleParentCategories",["lib/mustache"],function(mustache){var escapedTemplate='<h1 class="popuptitletext singlemargin-bottom draggable">Select Parent Categories</h1>\n<p class="singlemargin-bottom">\nWhich Parent Categories would you like to compare?\n</p>\n<div class="list">\n<ul>\n{{#categories}}\n<li>\n<label>\n<input class="parentCategory" type="checkbox" value="{{id}}" {{#checked}} checked {{/checked}} />\n<span>{{name}}</span>\n</label>\n</li>\n{{/categories}}\n</ul>\n</div>\n<p class="doublemargin-top">\n<button class="applyChanges defaultbutton">Select</button>\n<button class="cancel button singlemargin-left">Cancel</button>\n</p>\n';return function(data,partials,wrap){return mustache.render(escapedTemplate,data,partials,wrap)}});define("src/components/chart/views/SelectMultipleParentCategoriesView",["backbone","underscore","jquery","mustache!src/components/chart/templates/selectMultipleParentCategories"],function(Backbone,_,$,template){"use strict";var SelectMultipleParentCategories=Backbone.View.extend({className:"selectMultipleParentCategories selectMultiple",events:{"change .parentCategory":"onSelectionChanged","click .applyChanges":"onApplyChanges","click .cancel":"onClose"},constructor:function SelectMultipleParentCategories(options){Backbone.View.apply(this,arguments);if(!options){throw new Error("must be initialized with options")}if(!options.categories){throw new TypeError("SelectMultipleParentCategories must be constructed with a categories option")}this.callback=options.callback;this.selectedIds=options.selectedIds;this.categories=options.categories},render:function render(){var selectedCategories=this.selectedIds,categories=this.categories.toJSON();_(categories).each(function(cat){if(_(selectedCategories).include(cat.id)){cat.checked=true}});this.$el.html(template({categories:categories}))},getValues:function getValues(){return _(this.$("input:checked")).map(function(checkedCategory){return parseInt($(checkedCategory).val(),10)})},onApplyChanges:function onApplyChanges(){this.applyChanges()},applyChanges:function applyChanges(){var self=this,selectedIds=this.selectedIds;if(!this.getValues().length){this.showWarningMessage();return}this.removeWarningMessage();if(_(selectedIds).isEqual(this.getValues())){this.remove();return}this.callback.call(null,this.getValues());self.remove()},onClose:function onClose(){this.remove()},remove:function remove(){Backbone.View.prototype.remove.call(this)},showWarningMessage:function showWarningMessage(){if(!this.$("p.warningMessage").length){return this.$("button.applyChanges").before('<p class="warningMessage">You must select at least one category</p>')}},removeWarningMessage:function removeWarningMessage(){return this.$("p.warningMessage").remove()},onSelectionChanged:function onSelectionChanged(){this.selectionChanged()},selectionChanged:function selectionChanged(){var modelValues=this.selectedIds,currentValues=this.getValues();if(_(modelValues).isEqual(currentValues)||!modelValues&&!currentValues.length){return this.$("button.applyChanges").removeClass("highlighted")}return this.$("button.applyChanges").addClass("highlighted")}},{show:function show(options){if(!options||!options.categories){throw new TypeError("SelectMultipleParentCategories.show must be passed a categories option")}var view=new SelectMultipleParentCategories(options);view.render();var remove=view.remove;view.remove=function(){this.$el.removeModal();remove.call(this)};view.$el.showModal({draggable:".selectMultipleParentCategories h1:first",className:"popup tinypopup",onClose:function onClose(){view.remove()}});return view}});return SelectMultipleParentCategories});define("src/components/chart/helper/dimensionsHelper",["underscore","src/globals/classifications","src/globals/flags","src/globals/flagNames"],function(_,classifications,flags,FLAGS){"use strict";var mapDimensions={queries:"queryId",emotions:"classifications",queryGroups:"queryGroupId",pageTypes:"pageType",threadEntryTypes:"threadEntryType",authors:"exactAuthor",languages:"language",accountTypes:"accountType",assignment:"assigned",domains:"domain",cities:"exclusiveLocation",counties:"exclusiveLocation",states:"exclusiveLocation",countries:"exclusiveLocation",continents:"exclusiveLocation",categories:"category",authorCities:"authorLocation",authorCounties:"authorLocation",authorStates:"authorLocation",authorCountries:"authorLocation",authorContinents:"authorLocation",parentCategories:"parentCategory"};function getDimensions(){return[{name:"Queries",options:[{name:"Queries",id:"queries"},{name:"Groups",id:"queryGroups"}]},{name:"Sentiment",options:[{name:"Sentiment",id:"sentiment"}]},{name:"Mention Type",options:[{name:"Mention Type",id:"threadEntryTypes"}]},{name:"Authors",options:[{name:"Author List",id:"authors"}]},{name:"Twitter",options:[{name:"Account Type",id:"accountTypes"},{name:"Gender",id:"gender"},{name:"Profession",id:"profession"},{name:"Interest",id:"interest"},{name:"Author Cities",id:"authorCities"},{name:"Author Counties",id:"authorCounties"},{name:"Author States",id:"authorStates"},{name:"Author Countries",id:"authorCountries"},{name:"Author Continents",id:"authorContinents"}]},{name:"Tags & Categories",options:[{name:"Tags",id:"tags"},{name:"Categories",id:"categories"},{name:"Multiple parent categories",id:"parentCategories"}]},{name:"Workflow",options:[{name:"Assignment",id:"assignment"},{name:"Priority",id:"priority"},{name:"Status",id:"status"},{name:"Checked",id:"checked"}]},{name:"Time",options:[{name:"Hours",id:"hours"},{name:"Days",id:"days"},{name:"Weeks",id:"weeks"},{name:"Months",id:"months"},{name:"Hour of Day",id:"hourOfDay"},{name:"Day of Week",id:"dayOfWeek"}]},{name:"Site",options:[{name:"Site List",id:"domains"},{name:"Page Type",id:"pageTypes"},{name:"MozRank",id:"mozRank"}]},{name:"Language",options:[{name:"Language",id:"languages"}]},{name:"Locations",options:[{name:"Cities",id:"cities"},{name:"Counties",id:"counties"},{name:"States",id:"states"},{name:"Countries",id:"countries"},{name:"Continents",id:"continents"}]},{name:"Logos",options:[{name:"Logo Version",id:"logoVersions"}]}].map(function(item){if(flags.variation(FLAGS.ENABLE_EMOTIONS)&&item.name==="Sentiment"){item.name="Sentiment & Emotion";item.options.push({name:"Emotions",id:"emotions"});return item}return item})}function hasUncategorisedMentions(filterCategory){var categories;if(!filterCategory){return false}categories=[].concat(filterCategory);categories.forEach(function(category){if(!_.isNumber(category)){throw new Error("Category ids must be numbers")}});return _.contains(categories,-1)}function getDimXCategoryIds(settings,dim1Filter,dim2Filter){var dim1CatId=settings.get("dimension1Category"),dim2CatId=settings.get("dimension2Category"),xCategoryIds=[];if(_.isArray(settings.get("xparentCategory"))){xCategoryIds=xCategoryIds.concat(settings.get("xparentCategory"))}if(settings.get("dimension1ChartCategoryNa")&&dim1Filter.value===-1){xCategoryIds=xCategoryIds.concat(dim1CatId)}if(settings.get("dimension2ChartCategoryNa")&&dim2Filter.value===-1){xCategoryIds=xCategoryIds.concat(dim2CatId)}return xCategoryIds}function mapUncategorisedIndicatorToXparentCategory(filters,dim1Filter,dim2Filter,settings){filters.category=_([].concat(filters.category)).filter(function(id){return id!==-1});filters.xparentCategory=getDimXCategoryIds(settings,dim1Filter,dim2Filter);if(!filters.category.length){filters.category=undefined}}function mapGeographicChartToFilter(dim1Filter,dim2Filter){var metrics=["cities","counties","states","countries","continents"];for(var i=0;i<metrics.length;i++){if(dim1Filter.type===metrics[i]){return dim1Filter.value}if(dim2Filter.type===metrics[i]){return dim2Filter.value}}}return{getDimensions:getDimensions,getFilters:function getFilters(dim1Filter,dim2Filter,settings){var filters={};var dim1KeyName=mapDimensions[dim1Filter.type]||dim1Filter.type;var dim2KeyName=mapDimensions[dim2Filter.type]||dim2Filter.type;filters[dim1KeyName]=dim1Filter.value;if(dim1KeyName!==dim2KeyName){filters[dim2KeyName]=dim2Filter.value}else{filters[dim1KeyName]=[].concat(filters[dim1KeyName]).concat(dim2Filter.value)}if(filters.queryGroupId){filters.queryGroupId=parseInt(filters.queryGroupId,10);filters.currentMode="queryGroup"}if(filters.queryId){filters.queryId=parseInt(filters.queryId,10);filters.currentMode="query";if(filters.queryGroupId){delete filters.queryGroupId}}if(dim1KeyName==="exclusiveLocation"&&dim2KeyName==="exclusiveLocation"){filters.exclusiveLocation=mapGeographicChartToFilter(dim1Filter,dim2Filter)}if(filters.checked){filters.checked=true}if(hasUncategorisedMentions(filters.category)){mapUncategorisedIndicatorToXparentCategory(filters,dim1Filter,dim2Filter,settings)}if(filters.classifications==="-1"){delete filters.classifications;filters.xclassifications=classifications.getEmotionLabels().map(function(_ref){var id=_ref.id;return id})}return filters}}});define("mustache!src/components/chart/templates/dimensionInputs",["lib/mustache"],function(mustache){var escapedTemplate='<p class="dimensionWrapper">\n<label>Show <span class="lightgrey">(Y-Axis)</span></label>\n<select class="dimension selectfield" name="aggregate">\n<option value="">Please select...</option>\n{{#aggregateDimensions}}{{{.}}}{{/aggregateDimensions}}\n</select>\n<a class="help icon-bwhelp" data-key="chart:dimension-input-show"></a>\n{{#dimensionInfo}}aggregate|{{aggregate}}{{/dimensionInfo}}\n</p>\n<p class="forDimension dimensionWrapper">\n<label>For <span class="lightgrey">(X-Axis)</span></label>\n<select class="dimension selectfield changeableDimension" name="dimension1">\n<option value="">Please select...</option>\n{{#dimension1Dimensions}}{{{.}}}{{/dimension1Dimensions}}\n</select>\n<a class="help icon-bwhelp" data-key="chart:dimension-input-for"></a>\n{{#dimensionInfo}}dimension1|{{dimension1}}{{/dimensionInfo}}\n</p>\n<p class="breakdownDimension dimensionWrapper">\n<label>Breakdown by</label>\n<select class="dimension selectfield changeableDimension" name="dimension2">\n<option value="">Please select...</option>\n{{#dimension2Dimensions}}{{{.}}}{{/dimension2Dimensions}}\n</select>\n<a class="help icon-bwhelp" data-key="chart:dimension-input-breakdown"></a>\n<a title="Swap For and Breakdown by" class="swapDimensions icon-retweet"></a>\n{{#dimensionInfo}}dimension2|{{dimension2}}{{/dimensionInfo}}\n</p>\n';return function(data,partials,wrap){return mustache.render(escapedTemplate,data,partials,wrap)}});define("src/components/chart/views/ControlsViewDimensionInputs",["underscore","jquery","src/globals/authorGroups","src/globals/siteGroups","src/models/SiteGroup","src/controls/views/SelectTagsView","src/views/ControlsViewInputs","src/views/QueryGroupFormView","src/views/CreateEditSiteGroupView","src/views/AuthorGroupAdministrationView","src/components/chart/views/SelectMultipleParentCategoriesView","src/components/chart/helper/dimensionsHelper","src/controls/lib/controlsViewDataBuilder","mustache!src/components/chart/templates/dimensionInputs","src/packages/customtip"],function(_,$,authorGroups,siteGroups,SiteGroup,SelectTagsView,ControlsViewInputs,QueryGroupFormView,CreateEditSiteGroupView,AuthorGroupAdministrationView,SelectMultipleParentCategoriesView,dimensionsHelper,controlsViewDataBuilder,dimensionInputsTemplate){"use strict";function makeSelectOptions(model,data,selectedItemModelKey){return"<option value>-- Please select --</option>\n"+controlsViewDataBuilder.buildOptionsFromObject(_(data).sortBy(function(datum){return datum.name.toLowerCase()}),model.get(selectedItemModelKey)).join("\n")}function makeSelect(model,data,selectedItemModelKey){var options=makeSelectOptions(model,data,selectedItemModelKey);return'<select name="'+selectedItemModelKey+'"" class="selectfield additionalDimension">'+options+"</select>"}function createUncategorizedMentionsCheckbox(isChecked,dimensionName){return'<span class="chartNaLabel">\n                    <input id="'.concat(dimensionName,'chartNa" ').concat(isChecked?"checked":"",' class="chartCategoryNa" type="checkbox"\' data-dimension="').concat(dimensionName,'">\n                    <label class="chartNa" for="\' + dimensionName + \'chartNa">\n                        Also show uncategorised Mentions\n                    </label>\n                </span>')}function createUntaggedMentionsCheckbox(isChecked,dimensionName){return'<span class="chartNaLabel">\n                    <input id="'.concat(dimensionName,'chartTagNa" ').concat(isChecked?"checked":"",' class="chartTagNa" type="checkbox" data-dimension="').concat(dimensionName,'">\n                    <label class="chartNa" for="').concat(dimensionName,'chartTagNa">\n                        Also show untagged Mentions\n                    </label>\n                </span>')}function mapCategories(userCategories){return _(userCategories).map(function(cat){return{name:cat.name,id:cat.id}})}function getMultipleParentCategoriesLinkText(parentCategories){if(parentCategories&&parentCategories.length){return"Change Selection"}return"Select Parent Categories"}var ControlsViewDimensionInputs=ControlsViewInputs.extend({events:function events(){return _.extend(ControlsViewInputs.prototype.events.call(this),{"change .dimension":"dimensionChange","change .additionalDimension":"additionalDimensionChange","click .tags":"onTagViewClick","click .selectParentCategories":"onParentCategoriesViewClick","click a.new":"onNewAdditionalDimensionClick","change input.chartCategoryNa":"onChartCategoryNaClick","change input.chartTagNa":"onChartTagNaClick","click .swapDimensions":"swapDimensions"})},constructor:function ControlsViewDimensionInputs(options){ControlsViewInputs.apply(this,arguments);if(!options.categories){throw new TypeError("ControlsViewDimensionInputs must be constructed with a categories option")}this.tagCollection=options.tagCollection;this.listenTo(authorGroups,"add remove change reset",this.refreshAuthorGroups);this.categories=options.categories;this.listenTo(this.categories,"add remove change reset",this.refreshCategories);this.listenTo(siteGroups,"add remove change reset",this.refreshSiteGroups);this.listenTo(this.model,"invalid",this.showValidationErrors)},remove:function remove(){if(this.tagsView){this.tagsView.remove()}if(this.parentCategorySelectView){this.parentCategorySelectView.remove()}ControlsViewInputs.prototype.remove.call(this)},render:function render(){var data=this.getTemplateData(this.model.toJSON());this.$el.html(dimensionInputsTemplate(data));this.disableOtherDimension(this.$("[name=dimension1]"));this.disableOtherDimension(this.$("[name=dimension2]"));this.$("a[title]").customtip({position:"top center"})},showValidationErrors:function showValidationErrors(model,errors){var self=this;_(errors).each(function(key){self.$('[name="'+key+'"]').addClass("invalid")})},hideValidationErrors:function hideValidationErrors(){this.$(".invalid").removeClass("invalid")},getDimensions:function getDimensions(){return dimensionsHelper.getDimensions()},getShowDimensions:function getShowDimensions(){return[{name:"Volume",options:[{name:"Volume",id:"volume"}]},{name:"Sentiment",options:[{name:"Net Sentiment",id:"netSentiment"}]},{name:"Author",options:[{name:"Unique Authors",id:"authors"}]},{name:"Forum",options:[{name:"Total Views",id:"forumViews"},{name:"Total Posts",id:"forumPosts"}]},{name:"Blog",options:[{name:"Total Comments",id:"blogComments"}]},{name:"Twitter",options:[{name:"Total Followers",id:"twitterFollowers"},{name:"Total Impressions",id:"impressions"},{name:"Total Twitter Author Reach",id:"reach"},{name:"Total Retweets",id:"twitterRetweets"},{name:"Total Kred Outreach",id:"outreach"},{name:"Total Kred Influence",id:"influence"}]},{name:"Site",options:[{name:"Unique Domains",id:"domains"}]},{name:"Reach",options:[{name:"Reach",id:"reachEstimate"}]}]},getTemplateData:function getTemplateData(){var buildAdditionalDimensionInput=_.bind(this.buildAdditionalDimensionInput,this),model=this.model,dimensions=this.getDimensions(),showDimensions=this.getShowDimensions();return{dimension1:model.get("dimension1"),dimension2:model.get("dimension2"),aggregate:model.get("aggregate"),aggregateDimensions:controlsViewDataBuilder.buildOptionsFromObject(showDimensions,model.get("aggregate")),dimension1Dimensions:controlsViewDataBuilder.buildOptionsFromObject(dimensions,model.get("dimension1")),dimension2Dimensions:controlsViewDataBuilder.buildOptionsFromObject(dimensions,model.get("dimension2")),dimensionInfo:function dimensionInfo(){return function(text,render){var split=text.split("|"),dimensionName=split[0],dimensionValue=render(split[1]),el=buildAdditionalDimensionInput(model,dimensionName,dimensionValue,makeSelect);return el?'<span class="'+dimensionName+'Additional">'+el+"</span>":""}}}},buildAdditionalDimensionInput:function buildAdditionalDimensionInput(model,dimensionName,dimensionValue,makeSelect){var val=dimensionValue.toLowerCase();var categories;var categorySelect;var tagSelect;var chartUncategorisedCheckbox;var chartUntaggedCheckbox;if(dimensionName==="aggregate"){return""}switch(val){case"domains":return makeSelect(model,siteGroups.toJSON(),dimensionName+"SiteGroup")+'<a class="new" data-type="'+val+'">new</a>';case"authors":return makeSelect(model,authorGroups.toJSON(),dimensionName+"AuthorGroup")+'<a class="new" data-type="'+val+'">new</a>';case"categories":categories=mapCategories(this.categories.toJSON());categorySelect=makeSelect(model,categories,dimensionName+"Category");chartUncategorisedCheckbox=createUncategorizedMentionsCheckbox(model.get(dimensionName+"ChartCategoryNa"),dimensionName);return categorySelect+chartUncategorisedCheckbox;case"emotions":return createUncategorizedMentionsCheckbox(model.get(dimensionName+"ChartCategoryNa"),dimensionName);case"parentcategories":return['<a class="selectParentCategories" data-dimension="'+dimensionName+'">',getMultipleParentCategoriesLinkText(model.get(dimensionName+"ParentCategories")),"</a>"].join("");case"tags":chartUntaggedCheckbox=createUntaggedMentionsCheckbox(model.get(dimensionName+"ChartTagNa"),dimensionName);tagSelect='<a data-dimension="'+dimensionName+'" class="tags">Select Tags</a>';return tagSelect+chartUntaggedCheckbox}return""},dimensionChange:function dimensionChange(e){var target=$(e.target);this.refreshAdditionalDimensionInfo(target);this.disableOtherDimension(target)},additionalDimensionChange:function additionalDimensionChange(e){var $el=$(e.target);if($el.val()){$el.removeClass("invalid")}else{$el.addClass("invalid")}},swapDimensions:function swapDimensions(){var $dimension1=this.$("select[name=dimension1]"),dimension1Val=$dimension1.val(),$dimension1Additional=this.$(".dimension1Additional").children(":input"),dimension1AdditionalVal=$dimension1Additional.length?$dimension1Additional.val():"",$dimension2=this.$("select[name=dimension2]"),dimension2Val=$dimension2.val(),$dimension2Additional=this.$(".dimension2Additional").children(":input"),dimension2AdditionalVal=$dimension2Additional.length?$dimension2Additional.val():"",dimSpecificValues=[{name:"categories",argumentName:"CategoryIds"},{name:"tags",argumentName:"SelectedTags"},{name:"parentCategories",argumentName:"ParentCategories"}],dimension1SpecificValue,dimension2SpecificValue,dimension1Args,dimension2Args,dimension1ChartNa=this.$("#dimension1chartNa").is(":checked")||false,dimension2ChartNa=this.$("#dimension2chartNa").is(":checked")||false;dimension1SpecificValue=_(dimSpecificValues).find(function(dimension){return dimension.name===dimension1Val});dimension2SpecificValue=_(dimSpecificValues).find(function(dimension){return dimension.name===dimension2Val});if(dimension1SpecificValue){dimension1Args=this.model.get("dimension1"+dimension1SpecificValue.argumentName)}if(dimension2SpecificValue){dimension2Args=this.model.get("dimension2"+dimension2SpecificValue.argumentName)}if(dimension1Args){if(dimension2SpecificValue&&dimension2SpecificValue.argumentName!==dimension1SpecificValue.argumentName){this.model.unset("dimension1"+dimension1SpecificValue.argumentName,{silent:true})}this.model.set("dimension2"+dimension1SpecificValue.argumentName,dimension1Args,{silent:true})}if(dimension2Args){if(dimension1SpecificValue&&dimension1SpecificValue.argumentName!==dimension2SpecificValue.argumentName){this.model.unset("dimension2"+dimension2SpecificValue.argumentName,{silent:true})}this.model.set("dimension1"+dimension2SpecificValue.argumentName,dimension2Args,{silent:true})}if(dimension1Val==="categories"){if(dimension2Val!=="categories"){this.model.set("dimension1ChartCategoryNa",false,{silent:true})}this.model.set("dimension2ChartCategoryNa",dimension1ChartNa,{silent:true})}if(dimension2Val==="categories"){if(dimension1Val!=="categories"){this.model.set("dimension2ChartCategoryNa",false,{silent:true})}this.model.set("dimension1ChartCategoryNa",dimension2ChartNa,{silent:true})}if(dimension1Val==="sentiment"){this.model.set("dimension1ChartCategoryNa",dimension1ChartNa,{silent:true})}if(dimension2Val==="sentiment"){this.model.set("dimension2ChartCategoryNa",dimension2ChartNa,{silent:true})}$dimension1.val(dimension2Val).trigger("change");$dimension2.val(dimension1Val).trigger("change");$dimension1Additional=this.$(".dimension1Additional").children(":input").first();if($dimension1Additional.length){$dimension1Additional.val(dimension2AdditionalVal)}$dimension2Additional=this.$(".dimension2Additional").children(":input").first();if($dimension2Additional.length){$dimension2Additional.val(dimension1AdditionalVal)}},refreshAdditionalDimensionInfo:function refreshAdditionalDimensionInfo(target){var $el=$(target),targetDimension=$el.attr("name"),newValue=$el.find("option:selected").val(),model=this.model,$container=$el.siblings("span."+targetDimension+"Additional");if($container.length){$container.empty()}else{$container=$('<span class="'+targetDimension+'Additional"/>').insertAfter($el)}$container.append(this.buildAdditionalDimensionInput(model,targetDimension,newValue,makeSelect))},disableShowDimensions:function disableShowDimensions(aggregate){var twitterExclusions=["domains","pageTypes","mozRank"],twitterDimensions=["influence","outreach","reach","twitterRetweets","twitterFollowers"],disableDimensions=[{name:"twitter",dimExclusions:twitterExclusions}],dimension1=this.$("[name=dimension1]"),dimension1Value=dimension1.val(),dimension2=this.$("[name=dimension2]"),dimension2Value=dimension2.val(),aggregateValue=aggregate.find("option:selected").val(),currentShowValue=_(twitterDimensions).include(aggregateValue)?"twitter":aggregateValue,showDimension=_(disableDimensions).find(function(dimension){return dimension.name===currentShowValue})||{dimExclusions:[]};dimension1.find("option").filter(function(){return _(showDimension.dimExclusions).include($(this).val())}).prop("disabled",true);dimension2.find("option").filter(function(){return _(showDimension.dimExclusions).include($(this).val())}).prop("disabled",true);if(_(showDimension.dimExclusions).include(dimension1Value)){dimension1.val("")}if(_(showDimension.dimExclusions).include(dimension2Value)){dimension2.val("")}},disableDimDimensions:function disableDimDimensions(target){var relatedShowDimensions={domains:["twitterRetweets","reach","twitterFollowers","influence","outreach"]};var allowedComparisons=["categories","tags","parentCategories","queries"];var val=target.val();var otherDimensionName=target.attr("name")==="dimension1"?"dimension2":"dimension1";var $show=this.$("select[name=aggregate]");var $otherDimensionSelect=this.$('select[name="'+otherDimensionName+'"]');var otherDimensionVal=$otherDimensionSelect.val();if(relatedShowDimensions[val]){$show.find("option").filter(function(){return _(relatedShowDimensions[val]).include($(this).val())}).prop("disabled",true);if(_(relatedShowDimensions[val]).include($show.val())){$show.val("")}}$otherDimensionSelect.find("option").filter(function(){var relatedShowDims=relatedShowDimensions[val]||[];return!_(relatedShowDims).include($(this).val())}).prop("disabled",false);$show.find("option").filter(function(){var relatedDims=relatedShowDimensions[val]||[],relatedOtherDims=relatedShowDimensions[otherDimensionVal]||[];return!_(relatedDims).include($(this).val())&&!_(relatedOtherDims).include($(this).val())}).prop("disabled",false);if(!_(allowedComparisons).include(val)){$otherDimensionSelect.find('option[value="'+val+'"]').prop("disabled",true)}},disableOtherDimension:function disableOtherDimension(target){if(target.attr("name")==="aggregate"){this.disableShowDimensions(target)}else{this.disableDimDimensions(target)}},refreshGroup:function refreshGroup(selectData,$selectEls){var options=makeSelectOptions(this.model,selectData);$selectEls.each(function(i,el){var $el=$(el),val=$el.val();$el.html(options).val(val).change()})},refreshAuthorGroups:function refreshAuthorGroups(){this.refreshGroup(authorGroups.toJSON(),this.$("select[name=dimension1AuthorGroup],select[name=dimension2AuthorGroup]"))},refreshSiteGroups:function refreshSiteGroups(){this.refreshGroup(siteGroups.toJSON(),this.$("select[name=dimension1SiteGroup],select[name=dimension2SiteGroup]"))},refreshCategories:function refreshCategories(){this.refreshGroup(mapCategories(this.categories.toJSON()),this.$("select[name=dimension1Category],select[name=dimension2Category]"))},onTagViewClick:function onTagViewClick(e){var $target=$(e.currentTarget),dimensionName=$target.data("dimension");e.preventDefault();this.showTagView($target,dimensionName)},onChartCategoryNaClick:function onChartCategoryNaClick(e){var checkbox=$(e.target),dimensionName=checkbox.data("dimension"),checkBoxValue={};if(checkbox.prop("checked")){checkBoxValue[dimensionName+"ChartCategoryNa"]=true;this.model.set(checkBoxValue,{silent:true})}else{checkBoxValue[dimensionName+"ChartCategoryNa"]=false;this.model.set(checkBoxValue,{silent:true})}},onChartTagNaClick:function onChartTagNaClick(e){var checkbox=$(e.target),dimensionName=checkbox.data("dimension"),checkBoxValue={};if(checkbox.prop("checked")){checkBoxValue[dimensionName+"ChartTagNa"]=true;this.model.set(checkBoxValue,{silent:true})}else{checkBoxValue[dimensionName+"ChartTagNa"]=false;this.model.set(checkBoxValue,{silent:true})}},showTagView:function showTagView($target,dimensionName){var self=this,selectedTagIds={};if(this.tagsView){this.tagsView.remove()}this.tagsView=SelectTagsView.show({$target:$target,collection:this.tagCollection,selectedIds:this.model.get(dimensionName+"SelectedTags")||[],dimension:dimensionName,callback:function callback(err,selectedIds){if(err){return}selectedTagIds[dimensionName+"SelectedTags"]=selectedIds;self.model.set(selectedTagIds,{silent:true})}})},onParentCategoriesViewClick:function onParentCategoriesViewClick(e){var dimensionName=$(e.target).data("dimension");this.showMultipleParentCategoriesView(dimensionName)},showMultipleParentCategoriesView:function showMultipleParentCategoriesView(dimensionName){var view=this,selectedParentCategoryIds={};if(view.parentCategorySelectView){view.parentCategorySelectView.remove()}view.parentCategorySelectView=SelectMultipleParentCategoriesView.show({selectedIds:view.model.get(dimensionName+"ParentCategories")||[],categories:view.categories,dimension:dimensionName,callback:function callback(categoryIds){selectedParentCategoryIds[dimensionName+"ParentCategories"]=categoryIds;view.model.set(selectedParentCategoryIds,{silent:true});view.trigger("changesMade");view.$("."+dimensionName+"Additional .selectParentCategories").text(getMultipleParentCategoriesLinkText(categoryIds))}})},onNewAdditionalDimensionClick:function onNewAdditionalDimensionClick(e){e.preventDefault();var $target=$(e.target),type=$target.data("type");switch(type){case"domains":this.newSiteGroup();break;case"queryGroups":QueryGroupFormView.show();break;case"authors":AuthorGroupAdministrationView.show({collection:authorGroups});break}},newSiteGroup:function newSiteGroup(){CreateEditSiteGroupView.show({collection:siteGroups,model:new SiteGroup})}});return ControlsViewDimensionInputs});define("src/extensions/TimePickerExtension",["underscore","src/ModuleWrapper","src/components/Component","src/events/componentEvents","src/events/globalEventNames","src/globals/currentDashboard","src/globals/currentProject","src/views/ControlsView","src/components/chart/views/ControlsViewDimensionInputs","daterangepicker.timesupport"],function(_,ModuleWrapper,Component,componentEvents,globalEventNames,currentDashboard,currentProject,ControlsView,ControlsViewDimensionInputs,timeSupport){"use strict";var active=false,moduleWrapper=new ModuleWrapper,COMPONENT_EVENT_NAMES=globalEventNames.COMPONENTS;function proxyTimepickerEvents(timeSupportPluginInstance){var timePickers={},plugin=timeSupportPluginInstance;timePickers.start=plugin.getStartTimePicker();timePickers.end=plugin.getEndTimePicker();Object.keys(timePickers).forEach(function(key){var timePicker=timePickers[key];if(!timePicker){return}timePicker.bind("onOpen",function(){plugin.picker.$input.trigger("onTimepickerOpen",{pickerName:key})});timePicker.bind("onSelect",function(selectedTime){plugin.picker.$input.trigger("onTimepickerSelect",{selectedTime:selectedTime,pickerName:key})})})}function setupComponentEvents(component){var componentName=component.componentName;component.$el.on("onTimepickerOpen",function(event,data){if(!data){return}componentEvents.trigger(COMPONENT_EVENT_NAMES.TIMEPICKER_OPENED,{componentName:componentName,pickerName:data.pickerName,dashboardId:currentDashboard.id,projectId:currentProject.id})});component.$el.on("onTimepickerSelect",function(event,data){if(!data){return}componentEvents.trigger(COMPONENT_EVENT_NAMES.TIMEPICKER_SELECTED,{componentName:componentName,pickerName:data.pickerName,selectedTime:data.selectedTime,dashboardId:currentDashboard.id,projectId:currentProject.id})})}function enableTimePicker(){moduleWrapper.wrap(ControlsView.prototype,"setupInputViews",function(originalFunc,viewOptions){if(!viewOptions.hasOwnProperty("enableTimePicker")){viewOptions.enableTimePicker=true}originalFunc(viewOptions)});moduleWrapper.wrap(timeSupport.prototype,"render",function(originalFunc,daterangepicker){originalFunc(daterangepicker);proxyTimepickerEvents(this)});moduleWrapper.wrap(Component.prototype,"buildControlsView",function(originalFunc){var promise=originalFunc();setupComponentEvents(this);return promise})}function addMinutesDimension(){moduleWrapper.wrap(ControlsViewDimensionInputs.prototype,"getDimensions",function(originalFunc){var dimensions=originalFunc();_(dimensions).findWhere({name:"Time"}).options.unshift({name:"Minutes",id:"minutes"});return dimensions})}return{id:"TimePicker",isActive:function isActive(){return active},apply:function apply(){if(active){return}enableTimePicker();addMinutesDimension();active=true},restore:function restore(){if(!active){return}active=false;moduleWrapper.restore()}}})})();